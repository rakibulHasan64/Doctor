



// import { useState } from "react";
// import { motion, AnimatePresence } from "framer-motion";
// import { ChevronDown } from "lucide-react";

// const faqs = [
//    {
//       question: "‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßã?",
//       answer: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßá ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
//    },
//    {
//       question: "‡¶Ü‡¶Æ‡¶ø ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?",
//       answer: "‡¶≤‡¶æ‡¶á‡¶≠ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶¨‡¶æ ‡¶¨‡ßÅ‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡¶™‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û‡¶¶‡ßá‡¶∞ ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
//    },
//    {
//       question: "‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶ï‡ßÄ ‡¶ï‡ßÄ?",
//       answer: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂, ‡¶®‡¶ó‡¶¶, ‡¶ï‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶ü/‡¶°‡ßá‡¶¨‡¶ø‡¶ü ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶ì ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶Ö‡¶® ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
//    },
//    {
//       question: "‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø‡¶§‡ßá ‡¶ï‡¶§ ‡¶∏‡¶Æ‡ßü ‡¶≤‡¶æ‡¶ó‡ßá?",
//       answer: "‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶∂‡¶π‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ ‡¶ì ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡ß®-‡ß© ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶¶‡¶ø‡¶¨‡¶∏ ‡¶≤‡¶æ‡¶ó‡ßá‡•§",
//    },
// ];

// function FiqSetion() {
//    const [openIndex, setOpenIndex] = useState(null);

//    const toggle = (index) => {
//       setOpenIndex(openIndex === index ? null : index);
//    };

//    return (
//       <section className="bg-gray-50 py-16 px-6 md:px-20">
//          <h2 className="text-3xl font-bold text-center mb-10 text-gray-800">‡¶∏‡¶ö‡¶∞‡¶æ‡¶ö‡¶∞ ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ (FAQ)</h2>
//          <div className="max-w-3xl mx-auto space-y-4">
//             {faqs.map((faq, index) => (
//                <div
//                   key={index}
//                   className="bg-white border border-gray-200 rounded-xl overflow-hidden shadow hover:shadow-md transition"
//                >
//                   <button
//                      onClick={() => toggle(index)}
//                      className="w-full px-6 py-4 flex justify-between items-center text-left text-gray-800 font-medium"
//                   >
//                      <span>{faq.question}</span>
//                      <motion.div
//                         animate={{ rotate: openIndex === index ? 180 : 0 }}
//                         transition={{ duration: 0.3 }}
//                      >
//                         <ChevronDown />
//                      </motion.div>
//                   </button>
//                   <AnimatePresence>
//                      {openIndex === index && (
//                         <motion.div
//                            key="answer"
//                            initial={{ height: 0, opacity: 0 }}
//                            animate={{ height: "auto", opacity: 1 }}
//                            exit={{ height: 0, opacity: 0 }}
//                            transition={{ duration: 0.3 }}
//                            className="px-6 pb-4 text-gray-600"
//                         >
//                            <p>{faq.answer}</p>
//                         </motion.div>
//                      )}
//                   </AnimatePresence>
//                </div>
//             ))}
//          </div>
//       </section>
//    );
// }

// export default FiqSetion;




import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { ChevronDown } from "lucide-react";

const faqs = [
   {
      question: "‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßã?",
      answer: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßá ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
      icon: "üíä"
   },
   {
      question: "‡¶Ü‡¶Æ‡¶ø ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?",
      answer: "‡¶≤‡¶æ‡¶á‡¶≠ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶¨‡¶æ ‡¶¨‡ßÅ‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡¶™‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û‡¶¶‡ßá‡¶∞ ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
      icon: "üë®‚Äç‚öïÔ∏è"
   },
   {
      question: "‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶ï‡ßÄ ‡¶ï‡ßÄ?",
      answer: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂, ‡¶®‡¶ó‡¶¶, ‡¶ï‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶ü/‡¶°‡ßá‡¶¨‡¶ø‡¶ü ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶ì ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶Ö‡¶® ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
      icon: "üí≥"
   },
   {
      question: "‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø‡¶§‡ßá ‡¶ï‡¶§ ‡¶∏‡¶Æ‡ßü ‡¶≤‡¶æ‡¶ó‡ßá?",
      answer: "‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶∂‡¶π‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ ‡¶ì ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡ß®-‡ß© ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶¶‡¶ø‡¶¨‡¶∏ ‡¶≤‡¶æ‡¶ó‡ßá‡•§",
      icon: "üöö"
   },
   {
      question: "‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶™‡¶≤‡¶ø‡¶∏‡¶ø ‡¶ï‡ßÄ?",
      answer: "‡¶Ö‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶ì‡¶∑‡ßÅ‡¶ß ‡ß© ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá, ‡¶§‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§",
      icon: "üîÑ"
   },
   {
      question: "‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨?",
      answer: "‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ï‡ßã‡¶° ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶è‡¶ï‡¶ü‡¶ø‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§",
      icon: "üì±"
   }
];

function FiqSetion() {
   const [openIndex, setOpenIndex] = useState(null);

   const toggle = (index) => {
      setOpenIndex(openIndex === index ? null : index);
   };

   return (
      <section className="bg-gradient-to-b from-blue-100 to-white py-20 px-4 sm:px-6 lg:px-8 ">
         <div className="max-w-4xl mx-auto">
            {/* Section Header */}
            <motion.div
               initial={{ opacity: 0, y: 20 }}
               whileInView={{ opacity: 1, y: 0 }}
               transition={{ duration: 0.6 }}
               viewport={{ once: true }}
               className="text-center mb-14"
            >
               <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
                  ‡¶∏‡¶ö‡¶∞‡¶æ‡¶ö‡¶∞ ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ
               </h2>
               <p className="text-lg text-gray-600 max-w-2xl mx-auto">
                  ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶æ‡¶¨‡ßá‡¶®
               </p>
            </motion.div>

            {/* FAQ Items */}
            <div className="space-y-4">
               {faqs.map((faq, index) => (
                  <motion.div
                     key={index}
                     initial={{ opacity: 0, y: 20 }}
                     whileInView={{ opacity: 1, y: 0 }}
                     transition={{ duration: 0.4, delay: index * 0.1 }}
                     viewport={{ once: true, margin: "-100px" }}
                     className="bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow"
                  >
                     <button
                        onClick={() => toggle(index)}
                        className={`w-full px-6 py-5 flex items-center justify-between text-left transition-colors ${openIndex === index ? 'bg-blue-50 rounded-t-xl' : ''}`}
                     >
                        <div className="flex items-center gap-4">
                           <span className="text-2xl">{faq.icon}</span>
                           <span className="text-lg font-medium text-gray-800">
                              {faq.question}
                           </span>
                        </div>
                        <motion.div
                           animate={{ rotate: openIndex === index ? 180 : 0 }}
                           transition={{ duration: 0.3 }}
                           className={`p-1 rounded-full ${openIndex === index ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-600'}`}
                        >
                           <ChevronDown size={20} />
                        </motion.div>
                     </button>

                     <AnimatePresence>
                        {openIndex === index && (
                           <motion.div
                              initial={{ opacity: 0, height: 0 }}
                              animate={{
                                 opacity: 1,
                                 height: "auto",
                                 transition: {
                                    opacity: { duration: 0.3 },
                                    height: { duration: 0.4 }
                                 }
                              }}
                              exit={{
                                 opacity: 0,
                                 height: 0,
                                 transition: {
                                    opacity: { duration: 0.2 },
                                    height: { duration: 0.3 }
                                 }
                              }}
                              className="overflow-hidden"
                           >
                              <div className="px-6 pb-6 pt-2 text-gray-600 flex gap-6">
                                 <div className="flex-1">
                                    <p>{faq.answer}</p>
                                    {index === 0 && (
                                       <button className="mt-4 text-blue-600 hover:underline text-sm font-medium">
                                          ‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ó‡¶æ‡¶á‡¶° ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‚Üí
                                       </button>
                                    )}
                                 </div>
                              </div>
                           </motion.div>
                        )}
                     </AnimatePresence>
                  </motion.div>
               ))}
            </div>

            {/* CTA Section */}
            <motion.div
               initial={{ opacity: 0, y: 20 }}
               whileInView={{ opacity: 1, y: 0 }}
               transition={{ duration: 0.6, delay: 0.2 }}
               viewport={{ once: true }}
               className="mt-16 text-center"
            >
               <h3 className="text-xl font-medium text-gray-800 mb-4">
                  ‡¶Ü‡¶∞‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ü‡¶õ‡ßá?
               </h3>
               <button className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-8 rounded-lg shadow-md hover:shadow-lg transition-all duration-300">
                  ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
               </button>
            </motion.div>
         </div>
      </section>
   );
}

export default FiqSetion;